{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","index","SearchBox","searchfield","updateSelection","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","err","info","this","setState","Component","App","updateWhileSearch","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOAceA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACxB,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,UACpD,gCACI,6BAAKL,IACL,4BAAIC,WCWLK,EAhBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAKf,OACI,mCAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OAAO,cAAC,EAAD,CAA6BV,KAAMO,EAAOG,GAAOV,KAAMC,MAAOM,EAAOG,GAAOT,MAAOC,GAAIK,EAAOG,GAAOR,IAA1FK,EAAOG,GAAOR,UCGrCS,EAbG,SAAC,GAAmC,EAAlCC,YAAmC,IAAtBC,EAAqB,EAArBA,gBAC7B,OACI,8BACI,uBACIV,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCCXI,EARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,QAArE,SACKJ,EAAMK,YCqBJC,G,wDAvBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAW,GAHA,E,qDAOnB,SAAkBC,EAAKC,GACnBC,KAAKC,SAAS,CAAEJ,UAAW,M,oBAG/B,WACI,OAAIG,KAAKJ,MAAMC,SAEP,uDAKDG,KAAKX,MAAMK,a,GApBCQ,cC6EZC,E,kDA3DX,aAAe,IAAD,8BACV,gBAQJC,kBAAoB,SAACC,GACjB,EAAKJ,SAAS,CAAClB,YAAcsB,EAAMC,OAAOC,SAR1C,EAAKX,MAAQ,CACTlB,OAAS,GACTK,YAAc,IAJR,E,qDAgBd,WAAqB,IAAD,OAChByB,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAAEvB,OAAQkC,S,oBAG/C,WACI,MAAgCZ,KAAKJ,MAA7BlB,EAAR,EAAQA,OAAQK,EAAhB,EAAgBA,YACV8B,EAAiBnC,EAAOoC,QAAO,SAAAC,GACjC,OAAOA,EAAM5C,KAAK6C,cAAcC,SAASlC,EAAYiC,kBAiBzD,OAAQtC,EAAOwC,OAGP,sBAAK5C,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWU,gBAAiBgB,KAAKI,oBAEjC,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAU1B,OAAQmC,WARlC,gD,GA5CMX,aCPHiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCKdO,IAASC,OAIP,8BACE,cAAC,EAAD,MAEAC,SAASC,eAAe,SAM5BX,M","file":"static/js/main.15c71357.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return (\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?200x200`} alt='robot' />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    // robots is used as a PROP in this situation\r\n    // const cardArray = robots.map((user, index) => {\r\n    //     return <Card key={robots[index].id} name={robots[index].name} email={robots[index].email} id={robots[index].id} />\r\n    // })       instead of assigning the array to a variable, can return it within the return statement\r\n    return (\r\n        <>\r\n            {\r\n                robots.map((user, index) => {\r\n                    return <Card key={robots[index].id} name={robots[index].name} email={robots[index].email} id={robots[index].id} />\r\n                })\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react'\r\n\r\nconst SearchBox = ({searchfield, updateSelection}) => {\r\n    return (\r\n        <div>\r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue' \r\n                type='search' \r\n                placeholder='search robots' \r\n                onChange={updateSelection}\r\n            />      \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox\r\n","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '2px solid white', height: '70vh'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll\r\n","import React, {Component} from 'react'\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            hasError : false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(err, info) {\r\n        this.setState({ hasError : true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return (\r\n                <h1>\r\n                    Oops. That's not good\r\n                </h1>\r\n            )\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry\r\n","// import React from 'react';\r\nimport React, {Component} from 'react';\r\nimport CardList from '../components/CardList'\r\n// import {robots} from './robots';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\n// const App = () => {\r\n//     return (\r\n//         <div className='tc '>\r\n//             <h1>RoboFriends</h1>\r\n//             <SearchBox />\r\n//             <CardList robots={robots}/>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\nclass App extends Component {       //App component created\r\n    constructor() {\r\n        super()\r\n        this.state = {              //has two states - created to be changed/updated\r\n            robots : [],        //these states will be used as props in functions\r\n            searchfield : ''        //to update information in App and on-screen via render()\r\n        }\r\n        // robots and searchfield are both STATEs in this scenario - can be changed\r\n    }\r\n\r\n    updateWhileSearch = (event) => {            //component created to update display based on the user search (dynamically)\r\n        this.setState({searchfield : event.target.value})   //sets the state based on the value entered into the searchfield by the user\r\n        // const filteredRobots = this.state.robots.filter(robots => {\r\n        //     return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n        // })       - moved down to render to use variable\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')     //fetch data with API (website provides user accounts to test with page)\r\n            .then(response => response.json())        //get users from site, then convert information to json\r\n            .then(users => this.setState({ robots: users }))            //then use users to update the state of robots to users\r\n    }\r\n\r\n    render() {\r\n        const { robots, searchfield } = this.state      //by destructuring, do not have to type this.state before each variable\r\n        const filteredRobots = robots.filter(robot => { //new array created to update state of array robots - based on (filtered) user input\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase()) //match robot name based on values entered(included) into searchfield\r\n        })\r\n        // if (robots.length === 0) {       //if the request is taking time to fetch data, will inform user page is loading data until completed\r\n        // if (!robots.length) {            //changed to ternary statement below\r\n        //     return <h1>Loading...</h1>\r\n        // } else {\r\n        //     return (\r\n        //         <div className='tc'>\r\n        //             <h1 className='f1'>RoboFriends</h1>\r\n        //             <SearchBox updateSelection={this.updateWhileSearch} />\r\n        //             {/* <CardList robots={this.state.robots}/> */}\r\n        //             <Scroll>\r\n        //                 <CardList robots={filteredRobots}/>\r\n        //             </Scroll>\r\n        //         </div>\r\n        //     )\r\n        // }\r\n        return !robots.length ? \r\n            <h1>Loading...</h1> :\r\n            (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>RoboFriends</h1>\r\n                    <SearchBox updateSelection={this.updateWhileSearch} />\r\n                    {/* <CardList robots={this.state.robots}/> */}\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filteredRobots}/>\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import './Hello.css';\nimport App from './containers/App';\n// import Hello from './Hello'\n// import Card from './Card';\n// import CardList from './CardList'\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n// import {robots} from './robots';\n\nReactDOM.render(        //we want the ReactDOM package to use render function to render code in render()\n  // <React.StrictMode>\n  //   <h1>Hello World</h1>\n  // </React.StrictMode>,\n  <div>\n    <App />\n  </div>\n  , document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}